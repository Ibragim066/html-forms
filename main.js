(()=>{"use strict";const t={popover:{valueMissing:"It's necessary to write text"},email:{valueMissing:"It's necessary to write email",typeMismatch:"It's not email!"},name:{valueMissing:"It's necessary to write text"},cost:{valueMissing:"It's necessary to write cost",rangeUnderflow:"Enter a number greater than 0"}};function e(t,e){t.forEach((t=>{const s=t.dataset?t.dataset.id:null,{value:o}=t;s&&(e[s]=o)}))}class s{constructor(t,e){this.row=e,this.dataProduct=t,this.bindToDOM()}bindToDOM(){this.row.innerHTML=`\n      <th class="product-name">${this.dataProduct.name}</th>\n      <th class="product-cost">${+this.dataProduct.cost}</th>\n      <th><span class="update">✎</span><span class="delete">✖</span></th>\n      `}events(t){const e=t.querySelector(".update"),s=t.querySelector(".delete");e.addEventListener("click",(()=>this.update(this.dataProduct))),s.addEventListener("click",(()=>this.delete()))}update(t){const e=document.querySelector("#editor-form");e.setAttribute("data-id",t.id),e.closest(".editor-form-container").classList.add("editor-form-container_visible");const s=e.querySelector('[data-id="name"]'),o=e.querySelector('[data-id="cost"]');s.value=t.name,o.value=t.cost}delete(){this._deleteMessage=document.querySelector(".delete-message"),this._deleteMessage.classList.add("delete-message_visible"),this._deleteMessage.setAttribute("data-id",this.dataProduct.id);const t=document.querySelector("tbody").getBoundingClientRect();this._deleteMessage.style.left=t.left+window.scrollX+t.width/2-this._deleteMessage.offsetWidth/2+"px",this._deleteMessage.style.top=`${t.top+window.scrollY}px`}markUp(){return this.row.innerHTML}}const o=[];class i{constructor(){this._tooltips=[]}showTooltip(t,e){const s=document.createElement("DIV");s.classList.add("form-error"),s.textContent=t;const o=performance.now();this._tooltips.push({id:o,element:s}),document.body.appendChild(s);const{left:i,bottom:n}=e.getBoundingClientRect();return s.style.left=`${window.scrollX+i}px`,s.style.top=`${n+5}px`,o}removeTooltip(t){this._tooltips.find((e=>e.id===t)).element.remove(),this._tooltips=this._tooltips.filter((e=>e.id!==t))}}const n=(t,e)=>{const s=Object.keys(ValidityState.prototype).find((e=>!!t.name&&("valid"!==e&&t.validity[e])));return!!s&&e[t.name][s]};class r{constructor(t){this._container=t,this._formContainer=null,this._errorElement=null,this._form=null,this._tooltipFactory=new i,this.productsArray=[],this.actualMessages=[]}bindToDOM(t){this.createFormContainer(t||{name:"",cost:""}),this.setEvents()}createFormContainer(t){this._formContainer=document.createElement("div"),this._formContainer.classList.add("editor-form-container"),this.setFormData(t),this._formContainer.innerHTML=r.formMarkup(this.formData),this._container.append(this._formContainer),this._form=this._container.querySelector("#editor-form"),this._errorElement=this._container.querySelector(".editor-form-error")}setFormData(t){this.formData=t}setEvents(){this._form.querySelector('[data-toggle="editor-close"]').addEventListener("click",(()=>this.closeForm())),this._form.addEventListener("submit",(t=>this.onSubmit(t))),this._form.addEventListener("focus",(()=>{}),!0),this._form.addEventListener("blur",(t=>this.elementOnBlur(t)),!0)}elementOnBlur(e){const s=e.target,o=n(s,t),i=this.actualMessages.findIndex((t=>t.name===s.name));o?-1===i&&this.showTooltip(o,s):-1!==i&&(this._tooltipFactory.removeTooltip(this.actualMessages[i].id),this.actualMessages.splice(i,1))}closeForm(){this._form.dataset.id&&this._form.removeAttribute("data-id"),this._form.reset(),this._formContainer.classList.remove("editor-form-container_visible")}onSubmit(t){t.preventDefault(),this.handleValidation()}handleValidation(){this.formElements=[...this._form.elements],this.actualMessages.forEach((t=>this._tooltipFactory.removeTooltip(t.id))),this.actualMessages=[],this._form.checkValidity()?this.processFormData():this.showErrors()}showErrors(){this.formElements.forEach((e=>{const s=n(e,t);s&&this.showTooltip(s,e)}))}processFormData(){this._form.dataset.id?this.updateProduct():this.createProduct(),this.closeForm()}updateProduct(){const t=+this._form.dataset.id,s=o.findIndex((e=>e.id===t)),i=o[s];e(this.formElements,i);const n=this._container.querySelector(`[data-row="${t}"]`);n.querySelector(".product-name").innerText=i.name,n.querySelector(".product-cost").innerText=i.cost}createProduct(){const t={};e(this.formElements,t),t.id=Date.now();const i=this._container.querySelector("tbody"),n=document.createElement("tr"),r=new s(t,n);o.push(r.dataProduct),n.classList.add("product-row"),n.innerHTML=r.markUp(),n.setAttribute("data-row",t.id),r.events(n),i.append(n)}showTooltip(t,e){this.actualMessages.push({name:e.name,id:this._tooltipFactory.showTooltip(t,e)})}static formMarkup(t){return`\n            <form id="editor-form" novalidate>\n                <div class="form-control form-editor">\n                  <label class="label-editor" for="name">Название</label>\n                  <input name="name" data-id="name" class="input input-editor" type="text" placeholder="product name" autocomplete="off" value="${t.name}" required> \n                </div>\n                <div class="form-control form-editor">\n                  <label for="cost" class="label-editor">Стоимость</label>\n                  <input name="cost" data-id="cost" class="input input-editor" type="number" min="1" placeholder="product cost" autocomplete="off" value="${t.cost}" required>\n                </div>\n\n                <div class="editor-btn">\n                  <button type="submit" class="btn btn-add" data-toggle="editor-add" title="Submit editor form">Сохранить</button>\n                  <button type="button" class="btn btn-close" data-toggle="editor-close" title="Close editor form">Закрыть</button>\n                </div>\n              </form>\n          `}}class a{constructor(){this._container=null}bindToDOM(t){this._container=t,this.drawUi(),this.setEventListeners()}drawUi(){this.isBound()&&(this._container.innerHTML=a.markUp)}isBound(){return null!==this._container}setEventListeners(){if(!this.isBound())return;this._container.querySelector(".btn").addEventListener("click",(t=>this.onClick(t)))}static get markUp(){return'\n      <div class="wrapper-btn">\n        <a tabindex="0" role="button" class="btn" data-toggle="popover" title="Popover title" data-content="And here\'s some amazing content?">Click to toggle popover</a>\n      </div>\n      <div class="popover-message">\n        <h3 class="popover-title">Popover title</h3>\n        <p class="popover-text">And here\'s some amazing content. It\'s very engaging. Right?"</p>\n      </div>\n    '}onClick(t){this.popoverMessage=this._container.querySelector(".popover-message"),this.popoverMessage.classList.toggle("popover-message_visible"),this.positionPopoverMessage(t)}positionPopoverMessage(t){const e=t.currentTarget.getBoundingClientRect(),s=this.popoverMessage.getBoundingClientRect(),o=e.left+e.width/2-s.width/2+window.scrollX,i=e.top-s.height-20+window.scrollY;this.popoverMessage.style.left=`${o}px`,this.popoverMessage.style.top=`${i}px`}}(new a).bindToDOM(document.querySelector("#popover-container"));(new class{constructor(){this._container=null,this.editorForm=null,this.deleteMessage=null,this.products=o}bindToDOM(t){this._container=t,this.drawUi(),this.events()}drawUi(){this.checkBinding(),this._container.innerHTML='\n      <table class="table">\n        <caption class="title-table">My editor</caption>\n        <thead>\n          <tr class="products">\n            <th  colspan="2" style="text-align:left">Товары</th>\n            <th style="text-align:right" data-id="add"><span class="add">✙</span></th>\n          </tr>\n          <tr class="product-table">\n            <th>Название</th>\n            <th>Стоимость</th>\n            <th>Действия</th>\n          </tr>\n        </thead>\n        <tbody></tbody>\n      </table>\n      <div class="delete-message">\n        <h2>Вы действительно хотите удалить товар?</h2>\n        <div class="editor-btn">\n          <button type="button" class="btn btn-add" data-toggle="delete-product" title="Button for delete product">Да</button>\n          <button type="button" class="btn btn-close" data-toggle="close-message" title="Close delete message">Нет</button>\n        </div>\n      </div>\n      ';new r(this._container).bindToDOM(),this.editorForm=this._container.querySelector(".editor-form-container"),this.deleteMessage=this._container.querySelector(".delete-message")}checkBinding(){if(null===this._container)throw new Error("Form not bind to DOM")}events(){const t=this._container.querySelector('[data-id="add"]'),e=this._container.querySelector('[data-toggle="delete-product"]'),s=this._container.querySelector('[data-toggle="close-message"]');t.addEventListener("click",(()=>this.showForm())),e.addEventListener("click",(t=>this.deleteProduct(t))),s.addEventListener("click",(()=>this.closeMessage()))}showForm(){this.editorForm.classList.add("editor-form-container_visible");const t=this._container.querySelector("tbody").getBoundingClientRect();this.editorForm.style.left=t.left+window.scrollX+t.width/2-this.editorForm.offsetWidth/2+"px",this.editorForm.style.top=`${t.top+window.scrollY}px`}deleteProduct(){const t=o.findIndex((t=>t.id===+this.deleteMessage.dataset.id));o.splice(t,1);const e=this._container.querySelector(`[data-row="${this.deleteMessage.dataset.id}"]`);e.parentNode.removeChild(e),this.closeMessage()}closeMessage(){this.deleteMessage.classList.remove("delete-message_visible")}}).bindToDOM(document.querySelector("#editor-container"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,